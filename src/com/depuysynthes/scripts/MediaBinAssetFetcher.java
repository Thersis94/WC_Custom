package com.depuysynthes.scripts;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.siliconmtn.io.http.SMTHttpConnectionManager;
import com.siliconmtn.io.mail.EmailMessageVO;
import com.siliconmtn.io.mail.MailHandlerFactory;
import com.siliconmtn.io.mail.mta.MailTransportAgentIntfc;
import com.siliconmtn.util.CommandLineUtil;
import com.siliconmtn.util.StringUtil;
import com.smt.sitebuilder.common.constants.Constants;
import com.depuysynthes.action.MediaBinAdminAction;
import com.depuysynthes.action.MediaBinAssetVO;
import com.depuysynthes.action.MediaBinLinkAction;

/****************************************************************************
 * <b>Title</b>: MediaBinAssetFetcher.java<p/>
 * <b>Description: This class makes http calls out to LimeLight to download PDFs
 * that are visible on the DS.com website.  The files get pushed to Simon where
 * they get indexed by Lucene and included in search results.
 * The purpose of this class is ONLY to ensure the proper files have been fetched from LL.</b> 
 * <p/>
 * <b>Copyright:</b> Copyright (c) 2013<p/>
 * <b>Company:</b> Silicon Mountain Technologies<p/>
 * @author James McKain
 * @version 1.0
 * @since Aug 30, 2013
 ****************************************************************************/
public class MediaBinAssetFetcher extends CommandLineUtil {
    private int downloadCnt = 0;
    private int notFoundCnt = 0;
    private int assetCnt = 0;
	List <Exception> failures = new ArrayList<Exception>();
    
    
    public MediaBinAssetFetcher(String[] args) {
    		super(args);
		loadProperties("scripts/MediaBin.properties");
		loadDBConnection(props);
    		
    }
    
	/**
	 * @param args
	 * @throws Exception 
	 */
	public static void main(String[] args) {
		MediaBinAssetFetcher mf = new MediaBinAssetFetcher(args);
		mf.run();
	}
	

	/* (non-Javadoc)
	 * @see com.siliconmtn.util.CommandLineUtil#run()
	 */
	@Override
	public void run() {
		List<MediaBinAssetVO> data = loadManifest();
		assetCnt = data.size();
		String dropboxFolder = (String) props.get("downloadDir");
		
		//iterate the asset manifest.
		//For each one, determine if the file has already been retrieved before downloading
		for (MediaBinAssetVO vo : data) {
			String fileNm = StringUtil.replace(vo.getRevisionLvlTxt() + "/" + vo.getAssetNm(), "/", File.separator);
			log.debug("fileNm=" + fileNm);
			
			try {
				//check if this file at this revision-level has already been retrieved from LL
				File f = new File(dropboxFolder + fileNm);
				if (f.exists()) {
					log.debug("file exists: " + fileNm);
					continue;
				}
				
			} catch (Exception e) {
				log.error("could not read file " + vo.getDpySynMediaBinId(), e);
				failures.add(new Exception("failed " + vo.getDpySynMediaBinId(), e));
			}
			
			downloadFile(dropboxFolder, vo, fileNm);
		}
		
		if (dbConn != null) {
			try { dbConn.close(); } catch (Exception e) {}
		}
		
		sendStatusEmail();
		log.info("Finished " + data.size() + " files, " + downloadCnt + " new files downloaded");
	}
	
	
	/**
	 * call out to LL and download the asset.  Then write it to the dropbox folder
	 * @param dropboxFolder
	 * @param vo
	 * @param fileNm
	 */
	private void downloadFile(String dropboxFolder, MediaBinAssetVO vo, String fileNm) {
		String baseUrl = MediaBinLinkAction.US_BASE_URL;
		if (vo.getBusinessUnitId() == 2) baseUrl = MediaBinLinkAction.INT_BASE_URL;
		
		try {
			String url = baseUrl + StringUtil.replace(vo.getAssetNm(), " ","%20");
			log.debug("retrieving " + url);
			SMTHttpConnectionManager conn = new SMTHttpConnectionManager();
			byte[] data = conn.retrieveData(url);

			//trap all errors generated by LL
			if (404 == conn.getResponseCode()) {
				++notFoundCnt;
				//log.fatal(url);
				return; //we don't need to worry about missing files
			}
			if (200 != conn.getResponseCode() || data == null || data.length == 0)
				throw new IOException("Transaction Unsuccessful, code=" + conn.getResponseCode());
			
			//write the file to our repository
			String fullPath = dropboxFolder + fileNm; 
			String parentDir = fullPath.substring(0, fullPath.lastIndexOf(File.separator));
			File dir = new File(parentDir);
			if (!dir.exists()) dir.mkdirs();
			
			File f = new File(fullPath);
			FileOutputStream fos = new FileOutputStream(f);
			fos.write(data);
			fos.flush();
			fos.close();
			log.debug("wrote file " + fullPath);
			++downloadCnt;
			
		} catch (IOException ioe) {
			log.error("could not download file", ioe);
			failures.add(new Exception("download failed, IO: " + vo.getDpySynMediaBinId(), ioe));
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			failures.add(new Exception("download failed: " + vo.getDpySynMediaBinId(), e));
		}
	}
	
	
	/**
	 * load a list of indexable assets from the database (approved PDFs only)
	 * @return
	 */
	private List<MediaBinAssetVO> loadManifest() {
		List<MediaBinAssetVO> data = new ArrayList<MediaBinAssetVO>(); //at time of writing, this was enough capacity to avoid resizing
		
		StringBuilder sql = new StringBuilder();
		sql.append("select dpy_syn_mediabin_id, asset_nm, revision_lvl_txt, import_file_cd from ");
		sql.append(props.get(Constants.CUSTOM_DB_SCHEMA));
		sql.append("dpy_syn_mediabin where asset_type in (null");
		for (int a = MediaBinAdminAction.PDF_ASSETS.length; a > 0; a--) sql.append(",?");
		for (int v = MediaBinAdminAction.VIDEO_ASSETS.length; v > 0; v--) sql.append(",?");
		sql.append(")");
		log.debug(sql);
		
		int x=0;
		PreparedStatement ps = null;
		try {
			ps = dbConn.prepareStatement(sql.toString());
			for (String s : MediaBinAdminAction.PDF_ASSETS) ps.setString(++x, s);
			for (String v : MediaBinAdminAction.VIDEO_ASSETS) ps.setString(++x, v);
			ResultSet rs = ps.executeQuery();
			while (rs.next()) {
				MediaBinAssetVO vo = new MediaBinAssetVO(rs);
				vo.setBusinessUnitId(rs.getInt("import_file_cd"));
				data.add(vo);
			}
			
		} catch (SQLException sqle) {
			log.error("could not load manifest", sqle);
		} finally {
			try { ps.close(); } catch (Exception e) {}
		}
		
		log.info("loaded " + data.size() + " assets into manifest");
		return data;
	}
	

	/**
	 * report script outcome to the administrator via email
	 */
	private void sendStatusEmail() {
		try {
			// Build the email message
			EmailMessageVO msg = new EmailMessageVO(); 
			msg.addRecipient(props.getProperty("adminEmail"));
			msg.setSubject("MediaBin Asset Fetcher");
			msg.setFrom("appsupport@siliconmtn.com");
			
			StringBuilder html= new StringBuilder();
			html.append("<h4>Asset Count: " + assetCnt + " rows<br/>");
			html.append("New Downloads: " + downloadCnt + " rows<br/>");
			html.append("404's: " + notFoundCnt + "</h4>");
			
			if (failures.size() > 0) {
				html.append("<b>MediaBinAssetFetcher failed with the following reasons:</b><br/><br/>");
			
				// loop the errors and display them
				for (int i=0; i < failures.size(); i++) {
					html.append(failures.get(i).getMessage()).append("<hr/>\r\n");
				}
			}
			msg.setHtmlBody(html.toString());
			
			MailTransportAgentIntfc mail = MailHandlerFactory.getDefaultMTA(props);
			mail.sendMessage(msg);
		} catch (Exception e) {
			log.error("Could not send completion email, ", e);
		}
	}
}
